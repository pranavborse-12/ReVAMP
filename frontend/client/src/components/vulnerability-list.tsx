import { AlertTriangle, ChevronRight, Clock, ExternalLink, FileText, Shield } from "lucide-react"
import { Badge } from "./ui/badge"
import { Button } from "./ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card"
import { Separator } from "./ui/separator"

const vulnerabilities = [
  {
    id: "vuln-001",
    title: "SQL Injection Vulnerability",
    severity: "critical",
    category: "A03: Injection",
    description: "Potential SQL injection in user authentication endpoint. User input is not properly sanitized before being passed to SQL queries.",
    file: "auth/login.js",
    line: 42,
    cve: "CVE-2023-12345",
    discoveredAt: "2 hours ago",
    status: "open",
  },
  {
    id: "vuln-002",
    title: "Cross-Site Scripting (XSS)",
    severity: "high",
    category: "A07: Cross-Site Scripting",
    description: "Reflected XSS vulnerability in search functionality. User input is reflected without proper encoding.",
    file: "utils/sanitize.js",
    line: 128,
    discoveredAt: "5 hours ago",
    status: "investigating",
  },
  {
    id: "vuln-003",
    title: "Insecure Direct Object Reference",
    severity: "medium",
    category: "A01: Broken Access Control",
    description: "Users can access files by manipulating parameter values without proper authorization checks.",
    file: "api/users.js",
    line: 89,
    discoveredAt: "1 day ago",
    status: "fixed",
  },
]

const getSeverityVariant = (severity: string) => {
  switch (severity) {
    case "critical": return "destructive" as const
    case "high": return "destructive" as const
    case "medium": return "default" as const
    case "low": return "secondary" as const
    default: return "secondary" as const
  }
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case "critical": return "text-red-500"
    case "high": return "text-orange-500"
    case "medium": return "text-yellow-500"
    case "low": return "text-green-500"
    default: return "text-gray-500"
  }
}

const getStatusVariant = (status: string) => {
  switch (status) {
    case "fixed": return "secondary" as const
    case "investigating": return "default" as const
    case "open": return "outline" as const
    default: return "outline" as const
  }
}

export function VulnerabilityList() {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><AlertTriangle className="h-5 w-5 text-orange-500" />Recent Vulnerabilities</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {vulnerabilities.map((vuln: any, index: number) => (
          <div key={vuln.id}>
            <div className="flex items-start justify-between space-x-4">
              <div className="flex-1 space-y-2">
                <div className="flex items-center gap-2"><Shield className={`h-4 w-4 ${getSeverityColor(vuln.severity)}`} /><h4 className="font-medium">{vuln.title}</h4><Badge variant={getSeverityVariant(vuln.severity)}>{vuln.severity.toUpperCase()}</Badge><Badge variant={getStatusVariant(vuln.status)}>{vuln.status}</Badge></div>
                <div className="text-sm text-muted-foreground"><div className="font-medium text-primary">{vuln.category}</div><div className="mt-1">{vuln.description}</div></div>
                <div className="flex items-center gap-4 text-xs text-muted-foreground"><div className="flex items-center gap-1"><FileText className="h-3 w-3" /><span className="font-mono">{vuln.file}:{vuln.line}</span></div><div className="flex items-center gap-1"><Clock className="h-3 w-3" /><span>{vuln.discoveredAt}</span></div>{vuln.cve && (<div className="flex items-center gap-1"><ExternalLink className="h-3 w-3" /><span className="font-mono">{vuln.cve}</span></div>)}</div>
              </div>
              <div className="flex gap-2"><Button variant="outline" size="sm">Details<ChevronRight className="h-3 w-3 ml-1" /></Button>{vuln.status === "open" && (<Button size="sm">Fix Issue</Button>)}</div>
            </div>
            {index < vulnerabilities.length - 1 && (<Separator className="mt-4" />)}
          </div>
        ))}
        <div className="pt-4"><Button variant="outline" className="w-full">View All Vulnerabilities<ChevronRight className="h-4 w-4 ml-2" /></Button></div>
      </CardContent>
    </Card>
  )
}
